name: Build and Test

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main

env:
  GO_VERSION: '1.22'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run linting
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --out-format=colored-line-number

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint

    services:
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        env:
          REDIS_URL: redis://localhost:6379
        run: go test ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    strategy:
      matrix:
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install ARM64 cross-compilation tools
        if: matrix.goarch == 'arm64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Build binary
        env:
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: ${{ matrix.goarch == 'arm64' && 'aarch64-linux-gnu-gcc' || '' }}
        run: go build -o open-virbicoin-pool-${{ matrix.goarch }}

      - name: Test binary (AMD64 only)
        if: matrix.goarch == 'amd64'
        run: ./open-virbicoin-pool-${{ matrix.goarch }} --version || echo "Version check completed"

      - name: Verify ARM64 binary
        if: matrix.goarch == 'arm64'
        run: |
          file open-virbicoin-pool-${{ matrix.goarch }}
          echo "ARM64 binary built successfully"